//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DailyExpense.Authentication {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Authentication.IAuthentication")]
    public interface IAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveUser", ReplyAction="http://tempuri.org/IAuthentication/SaveUserResponse")]
        void SaveUser(Classes.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveUser", ReplyAction="http://tempuri.org/IAuthentication/SaveUserResponse")]
        System.Threading.Tasks.Task SaveUserAsync(Classes.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsUserExist", ReplyAction="http://tempuri.org/IAuthentication/IsUserExistResponse")]
        bool IsUserExist(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsUserExist", ReplyAction="http://tempuri.org/IAuthentication/IsUserExistResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsProfileCompleted", ReplyAction="http://tempuri.org/IAuthentication/IsProfileCompletedResponse")]
        bool IsProfileCompleted(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsProfileCompleted", ReplyAction="http://tempuri.org/IAuthentication/IsProfileCompletedResponse")]
        System.Threading.Tasks.Task<bool> IsProfileCompletedAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/AuthenticateUser", ReplyAction="http://tempuri.org/IAuthentication/AuthenticateUserResponse")]
        Classes.AuthenticationResult AuthenticateUser(Classes.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/AuthenticateUser", ReplyAction="http://tempuri.org/IAuthentication/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<Classes.AuthenticationResult> AuthenticateUserAsync(Classes.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/CountrtyList", ReplyAction="http://tempuri.org/IAuthentication/CountrtyListResponse")]
        Classes.Country[] CountrtyList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/CountrtyList", ReplyAction="http://tempuri.org/IAuthentication/CountrtyListResponse")]
        System.Threading.Tasks.Task<Classes.Country[]> CountrtyListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsFriendRequestExist", ReplyAction="http://tempuri.org/IAuthentication/IsFriendRequestExistResponse")]
        bool IsFriendRequestExist(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsFriendRequestExist", ReplyAction="http://tempuri.org/IAuthentication/IsFriendRequestExistResponse")]
        System.Threading.Tasks.Task<bool> IsFriendRequestExistAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequest", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestResponse")]
        Classes.Notification[] FriendRequest(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequest", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestResponse")]
        System.Threading.Tasks.Task<Classes.Notification[]> FriendRequestAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequestAccept", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestAcceptResponse")]
        void FriendRequestAccept(int notificationId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequestAccept", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestAcceptResponse")]
        System.Threading.Tasks.Task FriendRequestAcceptAsync(int notificationId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequestReject", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestRejectResponse")]
        void FriendRequestReject(int notificationId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/FriendRequestReject", ReplyAction="http://tempuri.org/IAuthentication/FriendRequestRejectResponse")]
        System.Threading.Tasks.Task FriendRequestRejectAsync(int notificationId, int friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetIncome", ReplyAction="http://tempuri.org/IAuthentication/GetIncomeResponse")]
        Classes.IncomeDetail[] GetIncome(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetIncome", ReplyAction="http://tempuri.org/IAuthentication/GetIncomeResponse")]
        System.Threading.Tasks.Task<Classes.IncomeDetail[]> GetIncomeAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveIncome", ReplyAction="http://tempuri.org/IAuthentication/SaveIncomeResponse")]
        void SaveIncome(int userId, string Amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveIncome", ReplyAction="http://tempuri.org/IAuthentication/SaveIncomeResponse")]
        System.Threading.Tasks.Task SaveIncomeAsync(int userId, string Amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UpdateProfile", ReplyAction="http://tempuri.org/IAuthentication/UpdateProfileResponse")]
        void UpdateProfile(int userId, string firstname, string lastname, int countryId, string mobileNo, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UpdateProfile", ReplyAction="http://tempuri.org/IAuthentication/UpdateProfileResponse")]
        System.Threading.Tasks.Task UpdateProfileAsync(int userId, string firstname, string lastname, int countryId, string mobileNo, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetUserProfile", ReplyAction="http://tempuri.org/IAuthentication/GetUserProfileResponse")]
        Classes.User[] GetUserProfile(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/GetUserProfile", ReplyAction="http://tempuri.org/IAuthentication/GetUserProfileResponse")]
        System.Threading.Tasks.Task<Classes.User[]> GetUserProfileAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveImage", ReplyAction="http://tempuri.org/IAuthentication/SaveImageResponse")]
        void SaveImage(byte[] image, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SaveImage", ReplyAction="http://tempuri.org/IAuthentication/SaveImageResponse")]
        System.Threading.Tasks.Task SaveImageAsync(byte[] image, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Inviteuser", ReplyAction="http://tempuri.org/IAuthentication/InviteuserResponse")]
        void Inviteuser(string emailId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Inviteuser", ReplyAction="http://tempuri.org/IAuthentication/InviteuserResponse")]
        System.Threading.Tasks.Task InviteuserAsync(string emailId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UserProfileExist", ReplyAction="http://tempuri.org/IAuthentication/UserProfileExistResponse")]
        int UserProfileExist(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UserProfileExist", ReplyAction="http://tempuri.org/IAuthentication/UserProfileExistResponse")]
        System.Threading.Tasks.Task<int> UserProfileExistAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SendInviteEmail", ReplyAction="http://tempuri.org/IAuthentication/SendInviteEmailResponse")]
        void SendInviteEmail(string emailId, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/SendInviteEmail", ReplyAction="http://tempuri.org/IAuthentication/SendInviteEmailResponse")]
        System.Threading.Tasks.Task SendInviteEmailAsync(string emailId, string currentUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationChannel : DailyExpense.Authentication.IAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<DailyExpense.Authentication.IAuthentication>, DailyExpense.Authentication.IAuthentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SaveUser(Classes.User user) {
            base.Channel.SaveUser(user);
        }
        
        public System.Threading.Tasks.Task SaveUserAsync(Classes.User user) {
            return base.Channel.SaveUserAsync(user);
        }
        
        public bool IsUserExist(string emailId) {
            return base.Channel.IsUserExist(emailId);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistAsync(string emailId) {
            return base.Channel.IsUserExistAsync(emailId);
        }
        
        public bool IsProfileCompleted(string emailId) {
            return base.Channel.IsProfileCompleted(emailId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProfileCompletedAsync(string emailId) {
            return base.Channel.IsProfileCompletedAsync(emailId);
        }
        
        public Classes.AuthenticationResult AuthenticateUser(Classes.User user) {
            return base.Channel.AuthenticateUser(user);
        }
        
        public System.Threading.Tasks.Task<Classes.AuthenticationResult> AuthenticateUserAsync(Classes.User user) {
            return base.Channel.AuthenticateUserAsync(user);
        }
        
        public Classes.Country[] CountrtyList() {
            return base.Channel.CountrtyList();
        }
        
        public System.Threading.Tasks.Task<Classes.Country[]> CountrtyListAsync() {
            return base.Channel.CountrtyListAsync();
        }
        
        public bool IsFriendRequestExist(int userId) {
            return base.Channel.IsFriendRequestExist(userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsFriendRequestExistAsync(int userId) {
            return base.Channel.IsFriendRequestExistAsync(userId);
        }
        
        public Classes.Notification[] FriendRequest(int userId) {
            return base.Channel.FriendRequest(userId);
        }
        
        public System.Threading.Tasks.Task<Classes.Notification[]> FriendRequestAsync(int userId) {
            return base.Channel.FriendRequestAsync(userId);
        }
        
        public void FriendRequestAccept(int notificationId, int friendId) {
            base.Channel.FriendRequestAccept(notificationId, friendId);
        }
        
        public System.Threading.Tasks.Task FriendRequestAcceptAsync(int notificationId, int friendId) {
            return base.Channel.FriendRequestAcceptAsync(notificationId, friendId);
        }
        
        public void FriendRequestReject(int notificationId, int friendId) {
            base.Channel.FriendRequestReject(notificationId, friendId);
        }
        
        public System.Threading.Tasks.Task FriendRequestRejectAsync(int notificationId, int friendId) {
            return base.Channel.FriendRequestRejectAsync(notificationId, friendId);
        }
        
        public Classes.IncomeDetail[] GetIncome(int userId) {
            return base.Channel.GetIncome(userId);
        }
        
        public System.Threading.Tasks.Task<Classes.IncomeDetail[]> GetIncomeAsync(int userId) {
            return base.Channel.GetIncomeAsync(userId);
        }
        
        public void SaveIncome(int userId, string Amount) {
            base.Channel.SaveIncome(userId, Amount);
        }
        
        public System.Threading.Tasks.Task SaveIncomeAsync(int userId, string Amount) {
            return base.Channel.SaveIncomeAsync(userId, Amount);
        }
        
        public void UpdateProfile(int userId, string firstname, string lastname, int countryId, string mobileNo, string status) {
            base.Channel.UpdateProfile(userId, firstname, lastname, countryId, mobileNo, status);
        }
        
        public System.Threading.Tasks.Task UpdateProfileAsync(int userId, string firstname, string lastname, int countryId, string mobileNo, string status) {
            return base.Channel.UpdateProfileAsync(userId, firstname, lastname, countryId, mobileNo, status);
        }
        
        public Classes.User[] GetUserProfile(int UserId) {
            return base.Channel.GetUserProfile(UserId);
        }
        
        public System.Threading.Tasks.Task<Classes.User[]> GetUserProfileAsync(int UserId) {
            return base.Channel.GetUserProfileAsync(UserId);
        }
        
        public void SaveImage(byte[] image, int userId) {
            base.Channel.SaveImage(image, userId);
        }
        
        public System.Threading.Tasks.Task SaveImageAsync(byte[] image, int userId) {
            return base.Channel.SaveImageAsync(image, userId);
        }
        
        public void Inviteuser(string emailId, int UserId) {
            base.Channel.Inviteuser(emailId, UserId);
        }
        
        public System.Threading.Tasks.Task InviteuserAsync(string emailId, int UserId) {
            return base.Channel.InviteuserAsync(emailId, UserId);
        }
        
        public int UserProfileExist(string emailId) {
            return base.Channel.UserProfileExist(emailId);
        }
        
        public System.Threading.Tasks.Task<int> UserProfileExistAsync(string emailId) {
            return base.Channel.UserProfileExistAsync(emailId);
        }
        
        public void SendInviteEmail(string emailId, string currentUser) {
            base.Channel.SendInviteEmail(emailId, currentUser);
        }
        
        public System.Threading.Tasks.Task SendInviteEmailAsync(string emailId, string currentUser) {
            return base.Channel.SendInviteEmailAsync(emailId, currentUser);
        }
    }
}
