//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DailyExpenseDL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Data.Entity.Core.EntityClient;
    using System.Data.Common;

    public partial class ExpenseEntities : DbContext
    {
        //public ExpenseEntities()
        //    : base("name=ExpenseEntities")
        //{
        //}
        public ExpenseEntities(DbConnection connectionString, bool contextOwnsConnection = true)
           : base(connectionString, contextOwnsConnection)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public static ExpenseEntities CreateEntitiesForSpecificDatabaseName(string databaseName, bool contextOwnsConnection = true)
        {
            //Initialize the SqlConnectionStringBuilder
            SqlConnectionStringBuilder sqlConnectionBuilder = new SqlConnectionStringBuilder();
            sqlConnectionBuilder.DataSource = @"localhost\sqlexpress";
            sqlConnectionBuilder.InitialCatalog = databaseName;
            sqlConnectionBuilder.IntegratedSecurity = true;
            sqlConnectionBuilder.MultipleActiveResultSets = true;
            string sqlConnectionString = sqlConnectionBuilder.ConnectionString;

            //Initialize the EntityConnectionStringBuilder
            EntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder();
            entityBuilder.Provider = "System.Data.SqlClient";
            entityBuilder.ProviderConnectionString = sqlConnectionString;

            //Set the Metadata location.
            entityBuilder.Metadata = @"res://*/DataAccess.EncounterModel.EncounterModel.csdl|res://*/DataAccess.EncounterModel.EncounterModel.ssdl|res://*/DataAccess.EncounterModel.EncounterModel.msl";

            //Create entity connection
            EntityConnection connection = new EntityConnection(databaseName);

            return new ExpenseEntities(connection);
        }

        public virtual DbSet<BuildExpense> BuildExpenses { get; set; }
        public virtual DbSet<ContractorExpense> ContractorExpenses { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<MaterialExpense> MaterialExpenses { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<WorkersExpense> WorkersExpenses { get; set; }
        public virtual DbSet<FriendsList> FriendsLists { get; set; }
        public virtual DbSet<FriendTripMapping> FriendTripMappings { get; set; }
        public virtual DbSet<TripDetail> TripDetails { get; set; }
        public virtual DbSet<TripExpense> TripExpenses { get; set; }
        public virtual DbSet<TripItem> TripItems { get; set; }
        public virtual DbSet<IncomeDetail> IncomeDetails { get; set; }
        public virtual DbSet<ExpenseEntry> ExpenseEntries { get; set; }
        public virtual DbSet<UsersInfo> UsersInfoes { get; set; }
    
        public virtual ObjectResult<Get_GeneralExpenseByDate_Result> Get_GeneralExpenseByDate(string fromDate, string toDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_GeneralExpenseByDate_Result>("Get_GeneralExpenseByDate", fromDateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual int sp_buildExpenseEntry(Nullable<int> userID, string product, string description, string dWork, string date, string amount, string created_By, ObjectParameter error)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dWorkParameter = dWork != null ?
                new ObjectParameter("DWork", dWork) :
                new ObjectParameter("DWork", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var created_ByParameter = created_By != null ?
                new ObjectParameter("Created_By", created_By) :
                new ObjectParameter("Created_By", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_buildExpenseEntry", userIDParameter, productParameter, descriptionParameter, dWorkParameter, dateParameter, amountParameter, created_ByParameter, error);
        }
    
        public virtual int sp_chartdata(Nullable<int> userID, string frDate, string toDate, ObjectParameter error)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var frDateParameter = frDate != null ?
                new ObjectParameter("frDate", frDate) :
                new ObjectParameter("frDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_chartdata", userIDParameter, frDateParameter, toDateParameter, error);
        }
    
        public virtual int sp_logincheck(string emailID, string password)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_logincheck", emailIDParameter, passwordParameter);
        }
    
        public virtual int sp_transactionEntry(Nullable<int> userID, string product, string description, string date, string amount, string created_By, ObjectParameter error)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var created_ByParameter = created_By != null ?
                new ObjectParameter("Created_By", created_By) :
                new ObjectParameter("Created_By", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_transactionEntry", userIDParameter, productParameter, descriptionParameter, dateParameter, amountParameter, created_ByParameter, error);
        }
    
        public virtual int sp_userinformation(string emailID, string password, string firstName, string lastName, string mobileNo, string gender, string country, string created_By, ObjectParameter error)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var created_ByParameter = created_By != null ?
                new ObjectParameter("Created_By", created_By) :
                new ObjectParameter("Created_By", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userinformation", emailIDParameter, passwordParameter, firstNameParameter, lastNameParameter, mobileNoParameter, genderParameter, countryParameter, created_ByParameter, error);
        }
    }
}
